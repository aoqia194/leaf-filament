import org.gradle.util.GradleVersion

buildscript {
    repositories {
        maven {
            name "Fabric Repository"
            url 'https://maven.fabricmc.net'
        }
        mavenCentral()
    }
    dependencies {
        classpath "cuchaz:enigma-cli:${project.enigma_version}"
    }
}

plugins {
	id 'java-library'
    id 'com.diffplug.spotless' version '6.21.0'
	// id 'checkstyle'
    // Publishing to Maven Central
    id 'org.jreleaser' version '1.17.0'
	id 'maven-publish'
    id 'java-gradle-plugin'
}

def ENV = System.getenv()
if (!ENV.CI) {
    version = "${version}.local"
}

repositories {
	maven {
		name "Fabric Repository"
		url 'https://maven.fabricmc.net'
	}
	mavenCentral()
}

dependencies {
	implementation "org.ow2.asm:asm:${asm_version}"
	implementation "org.ow2.asm:asm-tree:${asm_version}"
	implementation "cuchaz:enigma:${enigma_version}"
	implementation "cuchaz:enigma-cli:${enigma_version}"
	implementation "net.fabricmc.unpick:unpick:${unpick_version}"
	implementation "net.fabricmc.unpick:unpick-format-utils:${unpick_version}"
	implementation "net.fabricmc.unpick:unpick-cli:${unpick_version}"
	implementation "net.fabricmc:tiny-remapper:${tiny_remapper_version}"
	implementation 'net.fabricmc:mapping-io:0.6.1'
	implementation 'net.fabricmc:javapoet:0.1.1'

    // Contains a number of useful utilities we can re-use.
    implementation ("${project.group}:loom:${loom_version}") {
        transitive = false
    }

	testImplementation platform("org.junit:junit-bom:${junit_version}")
	testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation "org.assertj:assertj-core:${assertj_version}"
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
	options.release = 17
}

java {
    withSourcesJar()
    withJavadocJar()
}

test {
	useJUnitPlatform()
}

//checkstyle {
//	configFile = file('checkstyle.xml')
//	toolVersion = '10.13.0'
//}

// Workaround https://github.com/gradle/gradle/issues/27035
//configurations.checkstyle {
//	resolutionStrategy.capabilitiesResolution.withCapability("com.google.
//	collections:google-collections") {
//		select("com.google.guava:guava:0")
//	}
//}

gradlePlugin {
    website = project.url
    vcsUrl = project.url

	plugins {
		filament {
			id = "${project.group}.${project.name}"
            displayName = project.name
            description = project.description
            tags.set(['projectzomboid', 'zomboid', 'leaf'])
			implementationClass = "${project.group}.${project.name}.FilamentGradlePlugin"
		}
	}
}

// Because jreleaser 1.16.0 doesnt create the dir some reason
tasks.register('createJreleaserDir') {
    layout.buildDirectory.file('jreleaser').get().asFile.mkdirs()
}
tasks.named('jreleaserFullRelease').configure {
    dependsOn 'createJreleaserDir'
}
tasks.named('jreleaserConfig').configure {
    dependsOn 'createJreleaserDir'
}

publishing {
    publications.withType(MavenPublication).configureEach {
        pom {
            name = project.name
            group = project.group
            description = project.description
            url = project.url
            inceptionYear = '2025'
            developers {
                developer {
                    id = 'aoqia'
                    name = 'aoqia'
                }
            }
            issueManagement {
                system = 'GitHub'
                url = "${project.url}/issues"
            }
            licenses {
                license {
                    name = 'CC0-1.0'
                    url = 'https://spdx.org/licenses/CC0-1.0.html'
                }
            }
            scm {
                connection = "scm:git:https://github.com/aoqia194/" + project.name + "/.git"
                developerConnection = "scm:git:ssh://github.com/aoqia194/" + project.name + "/.git"
                url = project.url
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir("staging-deploy")
        }
    }
}

jreleaser {
    project {
        name = rootProject.name
        version = rootProject.version
        versionPattern = 'SEMVER'
        authors = ['aoqia194', 'FabricMC']
        maintainers = ['aoqia194']
        license = 'CC0-1.0'
        inceptionYear = '2025'
        links {
            homepage = rootProject.url
            license = 'https://spdx.org/licenses/MIT.html'
        }
    }
    signing {
        active = 'ALWAYS'
        armored = true
        passphrase = ENV.GPG_PASSPHRASE_KEY
        publicKey = ENV.GPG_PUBLIC_KEY
        secretKey = ENV.GPG_PRIVATE_KEY
    }
    deploy {
        maven {
            pomchecker {
                version = "1.14.0"
                failOnWarning = false // annoying
                failOnError = true
                strict = true
            }
            mavenCentral {
                sonatype {
                    applyMavenCentralRules = true
                    active = "ALWAYS"
                    snapshotSupported = true
                    authorization = 'BEARER'
                    username = ENV.MAVEN_USERNAME
                    password = ENV.MAVEN_PASSWORD
                    url = "https://central.sonatype.com/api/v1/publisher"
                    stagingRepository("build/staging-deploy")
                    verifyUrl = "https://repo1.maven.org/maven2/{{path}}/{{filename}}"
                    namespace = rootProject.group
                    retryDelay = 60
                    maxRetries = 30

                    // Override the plugin marker artifact to disable maven jar checks.
                    artifactOverride {
                        groupId = "${rootProject.group}.${rootProject.name}"
                        artifactId = "${rootProject.group}.${rootProject.name}.gradle.plugin"
                        jar = false
                        sourceJar = false
                        javadocJar = false
                        verifyPom = true
                    }
                }
            }
        }
    }

    release {
        github {
            enabled = true
            repoOwner = 'aoqia194'
            name = 'leaf-filament'
            host = 'github.com'
            releaseName = '{{tagName}}'
            sign = true
            overwrite = true

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'

                append {
                    enabled = true
                }

                extraProperties.put('categorizeScopes', 'true')
            }
        }
    }
}

/**
 * Run this task to download the gradle sources next to the api jar, you may need to manually
 * attach the sources jar
 */
tasks.register('downloadGradleSources') {
	doLast {
		// Awful hack to find the gradle api location
		def gradleApiFile = project.configurations.detachedConfiguration(dependencies.gradleApi())
            .files.stream()
			.filter {
				it.name.startsWith("gradle-api")
			}.findFirst().orElseThrow()

		def gradleApiSources = new File(gradleApiFile.absolutePath.replace(".jar", "-sources.jar"))
		def url = "https://services.gradle.org/distributions/gradle-${GradleVersion.current().getVersion()}-src.zip"

		gradleApiSources.delete()

		println("Downloading (${url}) to (${gradleApiSources})")
		gradleApiSources << new URL(url).newInputStream()
	}
}
